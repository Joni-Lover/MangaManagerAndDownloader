/*
 * The MIT License
 *
 * Copyright 2014 Andreas Giemza <andreas@giemza.net>.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package de.andreasgiemza.mangadownloader.download;

import de.andreasgiemza.mangadownloader.data.Chapter;
import de.andreasgiemza.mangadownloader.helpers.Filename;
import de.andreasgiemza.mangadownloader.data.Manga;
import de.andreasgiemza.mangadownloader.sites.Site;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import org.jsoup.Jsoup;

/**
 *
 * @author Andreas Giemza <andreas@giemza.net>
 */
public class Download extends javax.swing.JPanel {

    private volatile boolean interrupted;
    private final Path currentDirectory;
    private final Site site;
    private final Manga selectedManga;
    private final List<Chapter> chapters;
    private int chapterCount = 0;

    public Download(Path currentDirectory, Site site, Manga selectedManga, List<Chapter> chapters) {
        this.currentDirectory = currentDirectory;
        this.site = site;
        this.selectedManga = selectedManga;
        this.chapters = chapters;

        initComponents();

        // Setup manga info
        mangaTitleLabel.setText(selectedManga.getTitle());

        // Setup Chapter info
        for (Chapter chapter : chapters) {
            if (chapter.isDownload()) {
                chapterCount++;
            }
        }
        chapterProgressBar.setMaximum(chapterCount);
        chapterProgressBar.setString(0 + " of " + chapterCount);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mangaLabel = new javax.swing.JLabel();
        mangaTitleLabel = new javax.swing.JLabel();
        chapterLabel = new javax.swing.JLabel();
        chapterTileLabel = new javax.swing.JLabel();
        chapterProgressBar = new javax.swing.JProgressBar();
        imageLabel = new javax.swing.JLabel();
        imageProgressBar = new javax.swing.JProgressBar();
        startButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        mangaLabel.setText("Manga:");
        add(mangaLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, 43, -1));

        mangaTitleLabel.setText("TEMP");
        add(mangaTitleLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(59, 11, 331, -1));

        chapterLabel.setText("Chapter:");
        add(chapterLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 36, -1, -1));

        chapterTileLabel.setText(" ");
        add(chapterTileLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(59, 36, 331, -1));

        chapterProgressBar.setString("");
        chapterProgressBar.setStringPainted(true);
        add(chapterProgressBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 56, 380, -1));

        imageLabel.setText("Images:");
        add(imageLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 84, 380, -1));

        imageProgressBar.setString("");
        imageProgressBar.setStringPainted(true);
        add(imageProgressBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 104, 380, -1));

        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });
        add(startButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 132, 380, -1));

        cancelButton.setText("Cancel");
        cancelButton.setEnabled(false);
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        add(cancelButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 166, 380, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        startButton.setEnabled(false);
        cancelButton.setEnabled(true);

        interrupted = false;

        new Thread(new Worker()).start();
    }//GEN-LAST:event_startButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        interrupted = true;
        cancelButton.setEnabled(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel chapterLabel;
    private javax.swing.JProgressBar chapterProgressBar;
    private javax.swing.JLabel chapterTileLabel;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JProgressBar imageProgressBar;
    private javax.swing.JLabel mangaLabel;
    private javax.swing.JLabel mangaTitleLabel;
    private javax.swing.JButton startButton;
    // End of variables declaration//GEN-END:variables

    private class Worker implements Runnable {

        @Override
        public void run() {
            int chapterDone = 1;

            for (Chapter chapter : chapters) {
                if (interrupted) {
                    updateGui();
                    return;
                }

                if (chapter.isDownload()) {
                    chapterTileLabel.setText(chapter.getTitle());
                    chapterProgressBar.setValue(chapterDone);
                    chapterProgressBar.setString(chapterDone + " of " + chapterCount);

                    imageProgressBar.setValue(0);
                    imageProgressBar.setString("Getting image links ...");
                    List<String> imageLinks = site.getChapterImageLinks(chapter);
                    imageProgressBar.setMaximum(imageLinks.size());

                    String mangaTitle = Filename.checkForIllegalCharacters(selectedManga.getTitle());
                    String chapterTitle = Filename.checkForIllegalCharacters(chapter.getTitle());

                    Path mangaFile = currentDirectory.resolve("mangas")
                            .resolve(mangaTitle)
                            .resolve(chapterTitle + ".cbz");

                    try {
                        if (!Files.exists(mangaFile.getParent())) {
                            Files.createDirectories(mangaFile.getParent());
                        }

                        if (Files.exists(mangaFile)) {
                            Files.delete(mangaFile);
                        }

                        try (ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(mangaFile.toFile()))) {
                            for (int i = 0; i < imageLinks.size(); i++) {
                                if (interrupted) {
                                    updateGui();
                                    return;
                                }

                                imageProgressBar.setValue(i + 1);
                                imageProgressBar.setString((i + 1) + " of " + imageLinks.size());

                                String imageLink = imageLinks.get(i);
                                String extension = imageLink.substring(imageLink.length() - 3, imageLink.length());

                                ZipEntry ze = new ZipEntry((i + 1) + "." + extension);
                                zos.putNextEntry(ze);

                                byte[] image = Jsoup.connect(imageLink)
                                        .maxBodySize(10 * 1024 * 1024)
                                        .userAgent("Mozilla/5.0 (Windows NT 6.3; rv:36.0) Gecko/20100101 Firefox/36.0")
                                        .ignoreContentType(true)
                                        .execute()
                                        .bodyAsBytes();

                                zos.write(image, 0, image.length);
                                zos.closeEntry();
                            }
                        }
                    } catch (IOException ex) {
                        Logger.getLogger(Download.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    chapterDone++;
                }
            }

            updateGui();
        }

        private void updateGui() {
            startButton.setEnabled(true);
            cancelButton.setEnabled(false);
        }
    }
}
