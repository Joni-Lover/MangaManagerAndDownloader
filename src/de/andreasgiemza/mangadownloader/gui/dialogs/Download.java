/*
 * The MIT License
 *
 * Copyright 2014 Andreas Giemza <andreas@giemza.net>.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package de.andreasgiemza.mangadownloader.gui.dialogs;

import de.andreasgiemza.mangadownloader.data.Chapter;
import de.andreasgiemza.mangadownloader.data.Image;
import de.andreasgiemza.mangadownloader.data.Manga;
import de.andreasgiemza.mangadownloader.helpers.FilenameHelper;
import de.andreasgiemza.mangadownloader.helpers.JsoupHelper;
import de.andreasgiemza.mangadownloader.sites.Site;
import java.awt.event.WindowEvent;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import javax.swing.JOptionPane;

/**
 *
 * @author Andreas Giemza <andreas@giemza.net>
 */
public class Download extends javax.swing.JDialog {

    private final Download download = this;
    // Data
    private final Site site;
    private final Manga manga;
    private final List<Chapter> chapters;
    // Thread
    private final Thread thread = new Thread(new Worker());
    private volatile boolean interrupted = false;

    public Download(java.awt.Frame parent, boolean modal, Site site, Manga manga, List<Chapter> chapters) {
        super(parent, modal);
        initComponents();

        this.site = site;
        this.manga = manga;
        this.chapters = chapters;

        // Only close window when thread is finished
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                if (thread.isAlive()) {
                    JOptionPane.showMessageDialog(
                            download,
                            "Downloading in progress! Wait or cancel.",
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                } else {
                    dispose();
                }
            }
        });
    }

    @Override
    public void setVisible(boolean b) {
        thread.start();

        super.setVisible(b);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mangaLabel = new javax.swing.JLabel();
        mangaTitleLabel = new javax.swing.JLabel();
        chapterLabel = new javax.swing.JLabel();
        chapterTileLabel = new javax.swing.JLabel();
        chapterProgressBar = new javax.swing.JProgressBar();
        imageLabel = new javax.swing.JLabel();
        imageProgressBar = new javax.swing.JProgressBar();
        cancelButton = new javax.swing.JButton();
        errorLogPanel = new javax.swing.JPanel();
        errorLogScrollPane = new javax.swing.JScrollPane();
        errorLogTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Download");
        setResizable(false);

        mangaLabel.setText("Manga:");

        mangaTitleLabel.setText("TEMP");

        chapterLabel.setText("Chapter:");

        chapterTileLabel.setText(" ");

        chapterProgressBar.setString("");
        chapterProgressBar.setStringPainted(true);

        imageLabel.setText("Images:");

        imageProgressBar.setString("");
        imageProgressBar.setStringPainted(true);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        errorLogPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Error Log"));

        errorLogTextArea.setEditable(false);
        errorLogTextArea.setColumns(20);
        errorLogTextArea.setRows(10);
        errorLogScrollPane.setViewportView(errorLogTextArea);

        javax.swing.GroupLayout errorLogPanelLayout = new javax.swing.GroupLayout(errorLogPanel);
        errorLogPanel.setLayout(errorLogPanelLayout);
        errorLogPanelLayout.setHorizontalGroup(
            errorLogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(errorLogScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 608, Short.MAX_VALUE)
        );
        errorLogPanelLayout.setVerticalGroup(
            errorLogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(errorLogScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chapterProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(imageProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(errorLogPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(chapterLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                            .addComponent(mangaLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mangaTitleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(chapterTileLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mangaLabel)
                    .addComponent(mangaTitleLabel))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chapterLabel)
                    .addComponent(chapterTileLabel))
                .addGap(6, 6, 6)
                .addComponent(chapterProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(imageLabel)
                .addGap(6, 6, 6)
                .addComponent(imageProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cancelButton)
                .addGap(18, 18, 18)
                .addComponent(errorLogPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        interrupted = true;
        cancelButton.setEnabled(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel chapterLabel;
    private javax.swing.JProgressBar chapterProgressBar;
    private javax.swing.JLabel chapterTileLabel;
    private javax.swing.JPanel errorLogPanel;
    private javax.swing.JScrollPane errorLogScrollPane;
    private javax.swing.JTextArea errorLogTextArea;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JProgressBar imageProgressBar;
    private javax.swing.JLabel mangaLabel;
    private javax.swing.JLabel mangaTitleLabel;
    // End of variables declaration//GEN-END:variables

    private class Worker implements Runnable {

        private String errorLog = null;

        @Override
        public void run() {
            // Setup manga info
            mangaTitleLabel.setText(manga.getTitle());

            // Setup Chapter info
            int chapterCount = 0;

            for (Chapter chapter : chapters) {
                if (chapter.isDownload()) {
                    chapterCount++;
                }
            }

            chapterProgressBar.setMaximum(chapterCount);

            int chapterDone = 1;

            for (Chapter chapter : chapters) {
                if (chapter.isDownload()) {
                    Path mangaFile = FilenameHelper.buildChapterPath(manga, chapter);

                    chapterTileLabel.setText(chapter.getTitle());
                    chapterProgressBar.setValue(chapterDone);
                    chapterProgressBar.setString(chapterDone + " of " + chapterCount);

                    imageProgressBar.setValue(0);
                    imageProgressBar.setString("Getting image links ...");

                    if (interrupted) {
                        cancel(mangaFile, chapter);
                        return;
                    }

                    List<Image> imageLinks;

                    try {
                        imageLinks = site.getChapterImageLinks(chapter);
                    } catch (Exception ex) {
                        Logger.getLogger(Download.class.getName()).log(Level.SEVERE, null, ex);
                        chapterDone++;
                        error(mangaFile, chapter);
                        continue;
                    }

                    imageProgressBar.setMaximum(imageLinks.size());

                    try {
                        if (!Files.exists(mangaFile.getParent())) {
                            Files.createDirectories(mangaFile.getParent());
                        }

                        if (Files.exists(mangaFile)) {
                            Files.delete(mangaFile);
                        }

                        try (ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(mangaFile.toFile()))) {
                            for (int i = 0; i < imageLinks.size(); i++) {
                                if (interrupted) {
                                    zos.close();
                                    cancel(mangaFile, chapter);
                                    return;
                                }

                                imageProgressBar.setValue(i + 1);
                                imageProgressBar.setString((i + 1) + " of " + imageLinks.size());

                                ZipEntry ze = new ZipEntry((i + 1) + "." + imageLinks.get(i).getExtension());
                                zos.putNextEntry(ze);

                                byte[] image;

                                if (imageLinks.get(i).getLinkFragment() == null) {
                                    image = JsoupHelper.getImage(imageLinks.get(i));
                                } else {
                                    image = JsoupHelper.getImageWithFragment(imageLinks.get(i));
                                }

                                zos.write(image, 0, image.length);
                                zos.closeEntry();
                            }
                        }
                    } catch (Exception ex) {
                        Logger.getLogger(Download.class.getName()).log(Level.SEVERE, null, ex);
                        chapterDone++;
                        error(mangaFile, chapter);
                        continue;
                    }

                    chapterDone++;
                    chapter.setAlreadyDownloaded(true);
                    chapter.setDownload(false);
                }
            }

            cancelButton.setEnabled(false);

            JOptionPane.showMessageDialog(
                    download,
                    "Done downloading chapter(s)!",
                    "Information",
                    JOptionPane.INFORMATION_MESSAGE);
        }

        private void error(Path mangaFile, Chapter chapter) {
            errorOrCancel(mangaFile, chapter, "Error while downloading: ");
        }

        private void cancel(Path mangaFile, Chapter chapter) {
            errorOrCancel(mangaFile, chapter, "Aborted while downloading: ");
        }

        private void errorOrCancel(Path mangaFile, Chapter chapter, String message) {
            // Remove not finished file
            if (Files.exists(mangaFile)) {
                try {
                    Files.delete(mangaFile);
                } catch (IOException ex) {
                }
            }

            // Write error log
            if (errorLog == null) {
                errorLog = message + chapter.getTitle();
            } else {
                errorLog += "\n" + message + chapter.getTitle();
            }

            errorLogTextArea.setText(errorLog);
        }
    }
}
