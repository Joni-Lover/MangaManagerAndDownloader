package de.andreasgiemza.mangamanager;

import de.andreasgiemza.mangadownloader.MangaDownloader;
import de.andreasgiemza.mangadownloader.gui.dialogs.Loading;
import de.andreasgiemza.mangadownloader.helpers.RunInThreads;
import de.andreasgiemza.mangamanager.addsubscription.AddSubscription;
import static de.andreasgiemza.mangamanager.data.ChapterForSubscription.UNREAD;
import de.andreasgiemza.mangamanager.data.Subscription;
import de.andreasgiemza.mangamanager.data.SubscriptionsList;
import de.andreasgiemza.mangamanager.mangadetails.MangaDetails;
import java.awt.Component;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

/**
 *
 * @author Andreas Giemza <andreas@giemza.net>
 */
public class MangaManager extends javax.swing.JFrame {

    private final List<Subscription> subscriptions = new LinkedList<>();
    private final SubscriptionsTableModel subscriptionsTableModel = new SubscriptionsTableModel(subscriptions);

    private final MangaManager mangaManager = this;

    public MangaManager() {
        initComponents();

        setLocation(
                new Double((Toolkit.getDefaultToolkit().getScreenSize().getWidth() / 2) - (getWidth() / 2)).intValue(),
                new Double((Toolkit.getDefaultToolkit().getScreenSize().getHeight() / 2) - (getHeight() / 2)).intValue()
        );

        subscriptions.addAll(SubscriptionsList.load());
        subscriptionsTableModel.fireTableDataChanged();

        subscriptionsTable.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent me) {
                JTable table = (JTable) me.getSource();
                Point p = me.getPoint();
                int row = table.rowAtPoint(p);
                if (me.getClickCount() == 2) {
                    Subscription selectedSubscription = ((SubscriptionsTableModel) subscriptionsTable.getModel()).getSubscription(subscriptionsTable.convertRowIndexToModel(row));

                    MangaDetails mangaDetails = new MangaDetails(mangaManager, true, selectedSubscription);
                    mangaDetails.setVisible(true);

                    subscriptionsTableModel.fireTableDataChanged();
                    SubscriptionsList.save(subscriptions);
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                int r = subscriptionsTable.rowAtPoint(e.getPoint());
                if (r >= 0 && r < subscriptionsTable.getRowCount()) {
                    subscriptionsTable.setRowSelectionInterval(r, r);
                } else {
                    subscriptionsTable.clearSelection();
                }

                int rowindex = subscriptionsTable.getSelectedRow();
                if (rowindex < 0) {
                    return;
                }
                if (e.isPopupTrigger() && e.getComponent() instanceof JTable) {
                    subscriptionPopupMenu.show(e.getComponent(), e.getX(), e.getY());
                }
            }
        });

        subscriptionsTable.setDefaultRenderer(Object.class, new SubscriptionsTableCellRenderer());
        subscriptionsTable.setDefaultRenderer(Integer.class, new SubscriptionsTableCellRenderer());
    }

    public boolean addSubscription(Subscription subscription, boolean selected) {
        if (subscriptions.contains(subscription)) {
            return false;
        }

        subscriptions.add(subscription);
        subscriptionsTableModel.fireTableDataChanged();

        return true;
    }

    private Subscription getSelectedSubscription() {
        int selectedRow = subscriptionsTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a subscription!",
                    "Info", JOptionPane.INFORMATION_MESSAGE);

            return null;
        }

        return ((SubscriptionsTableModel) subscriptionsTable.getModel()).getSubscription(subscriptionsTable.convertRowIndexToModel(selectedRow));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        subscriptionPopupMenu = new javax.swing.JPopupMenu();
        openMenuItem = new javax.swing.JMenuItem();
        updateMenuItem = new javax.swing.JMenuItem();
        markAlllReadMenuItem = new javax.swing.JMenuItem();
        removeMenuItem = new javax.swing.JMenuItem();
        subscriptionsScrollPane = new javax.swing.JScrollPane();
        subscriptionsTable = new JTable(){
            @Override
            public Component prepareRenderer(TableCellRenderer renderer, int row, int column) {
                Component component = super.prepareRenderer(renderer, row, column);
                int rendererWidth = component.getPreferredSize().width;
                TableColumn tableColumn = getColumnModel().getColumn(column);
                tableColumn.setPreferredWidth(Math.max(rendererWidth + getIntercellSpacing().width, tableColumn.getPreferredWidth()));
                return component;
            }
        };
        updateAllButton = new javax.swing.JButton();
        removeSubscriptionButton = new javax.swing.JButton();
        addSubscriptionButton = new javax.swing.JButton();
        downloaderButton = new javax.swing.JButton();

        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        subscriptionPopupMenu.add(openMenuItem);

        updateMenuItem.setText("Update");
        updateMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateMenuItemActionPerformed(evt);
            }
        });
        subscriptionPopupMenu.add(updateMenuItem);

        markAlllReadMenuItem.setText("Mark all as read");
        markAlllReadMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                markAlllReadMenuItemActionPerformed(evt);
            }
        });
        subscriptionPopupMenu.add(markAlllReadMenuItem);

        removeMenuItem.setText("Remove");
        removeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeMenuItemActionPerformed(evt);
            }
        });
        subscriptionPopupMenu.add(removeMenuItem);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MangaManager");

        subscriptionsTable.setAutoCreateRowSorter(true);
        subscriptionsTable.setModel(subscriptionsTableModel);
        subscriptionsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        subscriptionsScrollPane.setViewportView(subscriptionsTable);

        updateAllButton.setText("Update all");
        updateAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateAllButtonActionPerformed(evt);
            }
        });

        removeSubscriptionButton.setText("Remove subscription");
        removeSubscriptionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeSubscriptionButtonActionPerformed(evt);
            }
        });

        addSubscriptionButton.setText("Add subscription");
        addSubscriptionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSubscriptionButtonActionPerformed(evt);
            }
        });

        downloaderButton.setText("Switch to Downloader");
        downloaderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloaderButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(subscriptionsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 780, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(downloaderButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(removeSubscriptionButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addSubscriptionButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(updateAllButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(subscriptionsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 549, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addSubscriptionButton)
                    .addComponent(removeSubscriptionButton)
                    .addComponent(updateAllButton)
                    .addComponent(downloaderButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addSubscriptionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSubscriptionButtonActionPerformed
        AddSubscription addSubscription = new AddSubscription(this, true);
        addSubscription.setVisible(true);

        SubscriptionsList.save(subscriptions);
    }//GEN-LAST:event_addSubscriptionButtonActionPerformed

    private void removeSubscriptionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeSubscriptionButtonActionPerformed
        Subscription subscription = getSelectedSubscription();

        if (subscription == null) {
            return;
        }

        int result = JOptionPane.showConfirmDialog(
                this,
                "Do you really want to remove " + subscription.getManga().getTitle() + "?",
                "Remove subscription",
                JOptionPane.OK_CANCEL_OPTION);

        if (result == JOptionPane.YES_OPTION) {
            subscriptions.remove(subscription);
            subscriptionsTableModel.fireTableDataChanged();

            SubscriptionsList.save(subscriptions);
        }
    }//GEN-LAST:event_removeSubscriptionButtonActionPerformed

    private void updateAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateAllButtonActionPerformed
        final Loading loading = new Loading(this, true, getX(), getY(),
                getWidth(), getHeight());
        loading.startRunnable(new Runnable() {

            @Override
            public void run() {
                System.out.println("Updating subscriptions ...");
                long startTime = System.nanoTime();

                List<Runnable> runnables = new LinkedList<>();

                for (final Subscription subscription : subscriptions) {
                    runnables.add(new Runnable() {
                        @Override
                        public void run() {
                            System.out.println("- Updating " + subscription.getManga().getTitle() + " ...");
                            try {
                                subscription.getNewChapters(subscription.getSite().getChapterList(subscription.getManga()), UNREAD);
                                subscriptionsTableModel.fireTableDataChanged();
                                System.out.println("- Updating " + subscription.getManga().getTitle() + " ... done!");
                            } catch (Exception ex) {
                                System.out.println("- Updating " + subscription.getManga().getTitle() + " ... not done! Error!");
                            }
                        }
                    });
                }

                RunInThreads.doIt(runnables);

                System.out.println("Updating subscriptions ... done! (Time: " + new BigDecimal((double) (System.nanoTime() - startTime) / 1000000000).setScale(2, RoundingMode.HALF_UP) + "s)");

                loading.dispose();
            }
        });

        subscriptionsTableModel.fireTableDataChanged();
        SubscriptionsList.save(subscriptions);
    }//GEN-LAST:event_updateAllButtonActionPerformed

    private void downloaderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloaderButtonActionPerformed
        new MangaDownloader().setVisible(true);
        dispose();
    }//GEN-LAST:event_downloaderButtonActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        Subscription subscription = getSelectedSubscription();

        if (subscription == null) {
            return;
        }

        MangaDetails mangaDetails = new MangaDetails(mangaManager, true, subscription);
        mangaDetails.setVisible(true);

        subscriptionsTableModel.fireTableDataChanged();
        SubscriptionsList.save(subscriptions);
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void updateMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateMenuItemActionPerformed
        final Subscription subscription = getSelectedSubscription();

        if (subscription == null) {
            return;
        }

        final Loading loading = new Loading(this, true, getX(), getY(),
                getWidth(), getHeight());
        loading.startRunnable(new Runnable() {

            @Override
            public void run() {

                LinkedList<Subscription> tempList = new LinkedList<>(subscriptions);
                Collections.shuffle(tempList, new Random(System.nanoTime()));

                System.out.println("Updating subscription ...");
                long startTime = System.nanoTime();

                System.out.println("- Updating " + subscription.getManga().getTitle() + " ...");
                try {
                    subscription.getNewChapters(subscription.getSite().getChapterList(subscription.getManga()), UNREAD);
                } catch (Exception ex) {
                }
                System.out.println("- Updating " + subscription.getManga().getTitle() + " ... done!");

                long endTime = System.nanoTime();
                double duration = (double) (endTime - startTime) / 1000000000;
                System.out.println("Updating subscription ... done! (Time: " + new BigDecimal(duration).setScale(2, RoundingMode.HALF_UP) + "s)");

                loading.dispose();
            }
        });

        subscriptionsTableModel.fireTableDataChanged();
        SubscriptionsList.save(subscriptions);
    }//GEN-LAST:event_updateMenuItemActionPerformed

    private void removeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeMenuItemActionPerformed
        removeSubscriptionButtonActionPerformed(evt);
    }//GEN-LAST:event_removeMenuItemActionPerformed

    private void markAlllReadMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_markAlllReadMenuItemActionPerformed
        final Subscription subscription = getSelectedSubscription();

        if (subscription == null) {
            return;
        }

        subscription.markAllAsRead();

        subscriptionsTableModel.fireTableDataChanged();
        SubscriptionsList.save(subscriptions);
    }//GEN-LAST:event_markAlllReadMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Windows look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Windows is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MangaManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MangaManager().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addSubscriptionButton;
    private javax.swing.JButton downloaderButton;
    private javax.swing.JMenuItem markAlllReadMenuItem;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem removeMenuItem;
    private javax.swing.JButton removeSubscriptionButton;
    private javax.swing.JPopupMenu subscriptionPopupMenu;
    private javax.swing.JScrollPane subscriptionsScrollPane;
    private javax.swing.JTable subscriptionsTable;
    private javax.swing.JButton updateAllButton;
    private javax.swing.JMenuItem updateMenuItem;
    // End of variables declaration//GEN-END:variables

}
